@page "/dashboard"
@page "/dashboard/{SearchedTickerParam}"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation


<div class="grid-container">

    <div class="title"><h3>Dashboard</h3></div>
    @*<div class="logout"><LogoutButton /></div>*@

    <div class="search-bar"><TickerSearchbar SearchedTickerSymbol="@SearchedTickerParam" OnSearchButtonClicked="SearchButtonClicked" /></div>
    @if (SearchedTickerParam == null)
    {
        <div class="choose-company-label">
            <h3>CHOOSE COMPANY</h3>
        </div>
    }
    else
    {
        <div class="add-watch-list-btn">
            <AddToWatchlistButton Symbol="@SearchedTickerParam" @ref="addToWatchlist" />
        </div>

        @if (CompanyDisplayInfo != null)
        {
            @*<div class="logo"><img src="@CompanyDisplayInfo.LogoUrl"></div>*@
            <div class="name-symbol">@CompanyDisplayInfo.Name (@CompanyDisplayInfo.Symbol)</div>
            <div class="locale">Locale: @CompanyDisplayInfo.Locale</div>
            <div class="description">Description: @CompanyDisplayInfo.SicDescription</div>
            <div class="home-url">Homepage: <a href="@CompanyDisplayInfo.HomepageUrl" target=”_blank”>@CompanyDisplayInfo.HomepageUrl</a></div>
        }
        else
        {
            <LoadingGif />
        }

        <div class="stock-chart">
            @if(StockData.Count() > 0)
            {
                <StockChart OuterStockDetails="StockData" />
            }
            else if (!FailedToLoadChartData)
            {
                <LoadingGif />
            }
            else
            {
                <p>Couldn't load chart data, search again.</p>
            }
        </div>

        @if (CompanyDisplayInfo != null)
        {
            <div class="daily">
                <div>From: @CompanyDisplayInfo.Daily.From.ToString("dd-MM-yyyy")</div>
                <div>Ticker: @CompanyDisplayInfo.Daily.Symbol</div>
                <div>Open: @CompanyDisplayInfo.Daily.Open</div>
                <div>High: @CompanyDisplayInfo.Daily.High</div>
                <div>Low: @CompanyDisplayInfo.Daily.Low</div>
                <div>Close: @CompanyDisplayInfo.Daily.Close</div>
                <div>Volume: @CompanyDisplayInfo.Daily.Volume</div>
                <div>Afterhours: @CompanyDisplayInfo.Daily.AfterHours</div>
                <div>Premarket: @CompanyDisplayInfo.Daily.PreMarket</div>
            </div>

            <div class="articles">
                <h3>Last 5 articles</h3>
                @foreach (var article in CompanyDisplayInfo.Articles)
                {
                    <a target="_blank" href="@article.ArticleUrl">
                        <div class="author-title">
                            <div>@article.Author</div>
                            <div>@article.Title</div>
                        </div>
                        <div class="article-date">
                            @article.PublishedUtc.ToString("dd-MM-yyyy")
                        </div>
                    </a>
                }
            </div>
        }
        else
        {
            @*<LoadingGif />*@
        }
    }
</div>


@code {
    [Parameter] public string SearchedTickerParam { get; set; }
    public TickerModel SearchedTicker { get; set; }

    public List<SingleOHLCDate> StockData { get; set; } = new List<SingleOHLCDate>();
    public bool FailedToLoadChartData { get; set; } = false;

    public MassiveCompanyDTO CompanyDisplayInfo { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    await PopulateData();
    //    UpdateOnListParam();
    //}

    protected override async Task OnParametersSetAsync()
    {
        //if (SearchedTickerParam != null) SearchButtonClicked(SearchedTickerParam);
        await PopulateData();
    }

    public async Task PopulateData()
    {
        if (SearchedTickerParam == null)
        {
            return;
        }
        StockData = new List<SingleOHLCDate>();

        SearchedTicker = new TickerModel
        {
            Ticker = SearchedTickerParam,
            Name = ""
        };

        try
        {
            FailedToLoadChartData = false;
            SingleOHLC[] data = await http.GetFromJsonAsync<SingleOHLC[]>($"api/tickers/stock/{SearchedTickerParam}");
            StockData.AddRange(data.Select(d => new SingleOHLCDate
            {
                T = UnixTimeStampToDateTime(d.T),
                O = d.O,
                H = d.H,
                L = d.L,
                C = d.C,
                V = d.V
            }).ToList());
        }
        catch (Exception e)
        {
            System.Diagnostics.Debug.WriteLine(e.Message);
            FailedToLoadChartData = true;
        }

        CompanyDisplayInfo = JObject.Parse(await http.GetStringAsync($"api/tickers/details/{SearchedTickerParam}?articleLimit=5")).ToObject<MassiveCompanyDTO>();

        StateHasChanged();

        return;
    }


    public static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddMilliseconds( unixTimeStamp ).ToLocalTime();
        return dateTime;
    }

    protected AddToWatchlistButton addToWatchlist;

    private void RefreshAddToWatchlistButton()
    {
        if (addToWatchlist != null) addToWatchlist.WatchlistAction();
    }

    protected async void SearchButtonClicked(string ticker)
    {
        if (ticker == null) return;
        navigation.NavigateTo($"/dashboard/{ticker}");
        CompanyDisplayInfo = null;
        await PopulateData();
        //RefreshAddToWatchlistButton();
    }
}
