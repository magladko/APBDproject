@page "/dashboard/{SearchedTickerParam}"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3>Dashboard</h3>



<LogoutButton />

<TickerSearchbar OnSearchButtonClicked="SearchButtonClicked" />

@*<StockChart OuterStockDetails="StockData" />*@

@if(StockData.Count() > 0)
{
    
    <StockChart OuterStockDetails="StockData" />
}
else
{
    <img src="https://i.gifer.com/4V0b.gif" />
}


@code {
    [Parameter] public string SearchedTickerParam { get; set; }
    public TickerModel SearchedTicker { get; set; }

    public List<SingleOHLCDate> StockData { get; set; } = new List<SingleOHLCDate>();

    protected override async Task OnInitializedAsync()
    {
        await PopulateData();
    }

    public async Task PopulateData()
    {
        if (SearchedTickerParam == null)
        {
            return;
        }
        StockData = new List<SingleOHLCDate>();

        SearchedTicker = new TickerModel
        {
            Ticker = SearchedTickerParam,
            Name = ""
        };

        SingleOHLC[] data = await http.GetFromJsonAsync<SingleOHLC[]>($"api/tickers/stock/{SearchedTickerParam}");

        StockData.AddRange(
            data.Select(d => new SingleOHLCDate
            {
                T = UnixTimeStampToDateTime(d.T),
                O = d.O,
                H = d.H,
                L = d.L,
                C = d.C,
                V = d.V
            }).ToList());

        StateHasChanged();

        return;
    }

    public static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddMilliseconds( unixTimeStamp ).ToLocalTime();
        return dateTime;
    }

    protected void SearchButtonClicked(TickerModel ticker)
    {
        if (ticker == null) return;
        
        navigation.NavigateTo($"/dashboard/{ticker.Ticker}");
        PopulateData();
    }
}
